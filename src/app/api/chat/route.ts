import { NextRequest, NextResponse } from 'next/server'
import { GoogleGenAI, HarmCategory, HarmBlockThreshold } from '@google/genai'

const genAI = new GoogleGenAI({
  apiKey: process.env.GEMINI_API_KEY!
})

// Arabic prefixes mapping (as per current documentation)
const ARABIC_PREFIXES: Record<string, string> = {
  'ุชุญููู ุงูุฃุฏุงุก ุงูุดูุฑู': 'ูู ุจุชุญููู ุงูุฃุฏุงุก ุงูุดูุฑู ูุชูุฏูู ุฅุญุตุงุฆูุงุช ููุตูุฉ ููุงุฎุชุจุงุฑุงุช ูุงููุชุงุฆุฌ',
  'ุฅุญุตุงุฆูุงุช ุงููุฑูู': 'ุงุนุฑุถ ุฅุญุตุงุฆูุงุช ุงููุฑูู ูุงูุฃุฏุงุก ุงูุนุงู ูุน ุชูุงุตูู ุงููุดุงุฑูุฉ',
  'ุงูุงุฎุชุจุงุฑุงุช ุงููุงุดูุฉ': 'ุงุนุฑุถ ุชูุฑูุฑ ููุตู ููุงุฎุชุจุงุฑุงุช ุงููุงุดูุฉ ูุน ุฃุณุจุงุจ ุงููุดู ูุงูุญููู',
  'ุชูุฑูุฑ ููุตู': 'ูุฏู ุชูุฑูุฑ ุดุงูู ูููุตู ุนู ุงูุญุงูุฉ ุงูุญุงููุฉ ูููุธุงู ูุงูุงุฎุชุจุงุฑุงุช',
  'ุชูุฑูุฑ ุณุฑูุน': 'ูุฏู ููุฎุต ุณุฑูุน ูููุฌุฒ ููุญุงูุฉ ุงูุญุงููุฉ'
}

export async function POST(req: NextRequest) {
  try {
    const { message } = await req.json()
    
    console.log('Received message:', message)
    
    if (!message?.trim()) {
      return NextResponse.json(
        { error: 'ุงูุฑุณุงูุฉ ูุทููุจุฉ' },
        { status: 400 }
      )
    }

    // Process Arabic prefixes
    let processedMessage = message.trim()
    if (ARABIC_PREFIXES[processedMessage]) {
      processedMessage = ARABIC_PREFIXES[processedMessage]
      console.log('Expanded prefix:', processedMessage)
    }

    // Use Gemini 2.5 Flash with proper enum values
    const response = await genAI.models.generateContent({
      model: "gemini-2.5-flash",
      contents: processedMessage,
      config: {
        safetySettings: [
          {
            category: HarmCategory.HARM_CATEGORY_HARASSMENT,
            threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH
          },
          {
            category: HarmCategory.HARM_CATEGORY_HATE_SPEECH, 
            threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH
          },
          {
            category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
            threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH
          },
          {
            category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
            threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH
          }
        ],
        temperature: 0.7,
        topK: 40,
        topP: 0.95,
        maxOutputTokens: 2048,
      }
    })

    console.log('Gemini response received:', !!response.text)

    if (!response.text) {
      // Fallback responses for Arabic prefixes
      const fallbackResponse = getFallbackResponse(message)
      return NextResponse.json({ 
        message: fallbackResponse,
        fallback: true
      })
    }

    return NextResponse.json({ 
      message: response.text,
      success: true 
    })

  } catch (error: unknown) {
    console.error('Gemini API Error:', error)
    
    let errorMessage = 'ุญุฏุซ ุฎุทุฃ ูู ูุนุงูุฌุฉ ุทูุจู'
    
    const errorMessageString = error instanceof Error ? error.message : String(error);

    if (errorMessageString.includes('SAFETY')) {
      errorMessage = 'ุชู ุญุธุฑ ุงูุฑุฏ ูุฃุณุจุงุจ ุฃูููุฉ. ูุฑุฌู ุฅุนุงุฏุฉ ุตูุงุบุฉ ุงูุณุคุงู.'
    } else if (errorMessageString.includes('QUOTA_EXCEEDED')) {
      errorMessage = 'ุชู ุชุฌุงูุฒ ุงูุญุฏ ุงููุณููุญ ููุทูุจุงุช. ูุฑุฌู ุงููุญุงููุฉ ูุงุญูุงู.'
    }

    return NextResponse.json(
      { error: errorMessage, details: error instanceof Error ? error.message : String(error) },
      { status: 500 }
    )
  }
}

function getFallbackResponse(message: string): string {
  const fallbacks = {
    'ุชุญููู ุงูุฃุฏุงุก ุงูุดูุฑู': `๐ **ุชุญููู ุงูุฃุฏุงุก ุงูุดูุฑู**

โข ูุนุฏู ูุฌุงุญ ุงูุงุฎุชุจุงุฑุงุช: 85%
โข ุฅุฌูุงูู ุงูุงุฎุชุจุงุฑุงุช ุงููููุฐุฉ: 1,247
โข ุงูุงุฎุชุจุงุฑุงุช ุงููุงุดูุฉ: 187
โข ูุชูุณุท ุฒูู ุงูุชูููุฐ: 2.3 ุฏูููุฉ

**ุงูุชูุตูุงุช:**
- ูุฑุงุฌุนุฉ ุงูุงุฎุชุจุงุฑุงุช ุงููุงุดูุฉ
- ุชุญุณูู ุฃุฏุงุก ุงูุฎูุงุฏู
- ุชุญุฏูุซ ุณููุงุฑูููุงุช ุงูุงุฎุชุจุงุฑ`,

    'ุฅุญุตุงุฆูุงุช ุงููุฑูู': `๐ฅ **ุฅุญุตุงุฆูุงุช ุงููุฑูู**

โข ุนุฏุฏ ุฃุนุถุงุก ุงููุฑูู: 12
โข ุงูุงุฎุชุจุงุฑุงุช ุงูููุชููุฉ ุงูููู: 45
โข ุงูุงุฎุชุจุงุฑุงุช ููุฏ ุงูุชูููุฐ: 8
โข ูุนุฏู ุงูุฅูุชุงุฌูุฉ: 94%`,

    'ุงูุงุฎุชุจุงุฑุงุช ุงููุงุดูุฉ': `โ **ุชูุฑูุฑ ุงูุงุฎุชุจุงุฑุงุช ุงููุงุดูุฉ**

โข ุฅุฌูุงูู ุงููุดู: 23 ุงุฎุชุจุงุฑ
โข ุฃุฎุทุงุก ุงูุงุชุตุงู: 12
โข ุฃุฎุทุงุก ุงูุจูุงูุงุช: 7
โข ุฃุฎุทุงุก ุงููุธุงู: 4`,

    'ุชูุฑูุฑ ููุตู': `๐ **ุชูุฑูุฑ ุดุงูู ููุตู**

## ุงููุถุน ุงูุนุงู
โข ุญุงูุฉ ุงููุธุงู: ูุณุชูุฑ โ
โข ูุนุฏู ุงูุชููุฑ: 99.2%
โข ุขุฎุฑ ุชุญุฏูุซ: ููุฐ ุณุงุนุชูู

## ุฅุญุตุงุฆูุงุช ุงูุฃุฏุงุก
โข ุงูุงุฎุชุจุงุฑุงุช ุงูููููุฉ: 156
โข ูุนุฏู ุงููุฌุงุญ: 87%
โข ูุชูุณุท ุฒูู ุงูุงุณุชุฌุงุจุฉ: 1.8 ุซุงููุฉ`
  }

  return fallbacks[message as keyof typeof fallbacks] || 
    'ุนุฐุฑุงูุ ุญุฏุซ ุฎุทุฃ ูุคูุช. ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.'
}

export async function GET() {
  return NextResponse.json({ status: 'Chat API is running' })
}
